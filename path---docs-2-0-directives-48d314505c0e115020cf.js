webpackJsonp([0x5db6049342ef],{266:function(n,a){n.exports={data:{page:{html:'<h2>Directives</h2>\n<p>Lighthouse comes with a handful of helpful directives to speed up development of your schema.</p>\n<h2>Field Directives</h2>\n<h3>@auth</h3>\n<p>The <code class="language-text">@auth</code> directive provides the currently authenticated user. This comes in handy on the root query. For example:</p>\n<div class="gatsby-highlight">\n      <pre class="language-graphql"><code class="language-graphql">type Query <span class="token punctuation">{</span>\n  <span class="token attr-name">me</span><span class="token punctuation">:</span> User <span class="token directive function">@auth</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Sending the following query will return the authenticated user, or if the request is not authenticated null will be returned.</p>\n<div class="gatsby-highlight">\n      <pre class="language-graphql"><code class="language-graphql"><span class="token keyword">query</span> Me <span class="token punctuation">{</span>\n  me <span class="token punctuation">{</span>\n    name\n    email\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h3>@belongsTo</h3>\n<p>The <code class="language-text">@belongsTo</code> directive eager loads the eloquent relationship so it should only be used on a type that resolved to an Eloquent model. The <code class="language-text">@belongsTo</code> directive accepts a <code class="language-text">relation</code> argument if your relationship has a different name than the field. For example, let\'s assume we have the following models:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Post</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">author</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">belongsTo</span><span class="token punctuation">(</span>User<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>We can express our GraphQL types like so:</p>\n<div class="gatsby-highlight">\n      <pre class="language-graphql"><code class="language-graphql">type User <span class="token punctuation">{</span>\n  <span class="token comment"># ....</span>\n<span class="token punctuation">}</span>\n\ntype Post <span class="token punctuation">{</span>\n  <span class="token comment"># ...</span>\n  author <span class="token directive function">@belongsTo</span>\n\n  <span class="token comment"># or we could use the `relation` argument and use</span>\n  <span class="token comment"># a different field name</span>\n  user <span class="token directive function">@belongsTo</span><span class="token punctuation">(</span><span class="token attr-name">relation</span><span class="token punctuation">:</span> <span class="token string">"author"</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h3>@create</h3>\n<p>The <code class="language-text">@create</code> directive can be used to create a new model. It requires a <code class="language-text">model</code> argument which should be the namespace of the model you want to create. In the following example, the <code class="language-text">createPost</code> mutation will autofill a new <code class="language-text">Post</code> eloquent model with the <code class="language-text">title</code> and <code class="language-text">content</code> arguments.</p>\n<p>Most of the time, you\'ll likely need to grab something like the authenticated user\'s <code class="language-text">id</code> and inject it into the arguments (since we don\'t want the client to decide what user <code class="language-text">id</code> to fill). In that case, use <code class="language-text">@create</code> with the <code class="language-text">@inject</code> directive (listed below).</p>\n<div class="gatsby-highlight">\n      <pre class="language-graphql"><code class="language-graphql">type Mutation <span class="token punctuation">{</span>\n  createPost<span class="token punctuation">(</span><span class="token attr-name">title</span><span class="token punctuation">:</span> String<span class="token operator">!</span><span class="token punctuation">,</span> <span class="token attr-name">content</span><span class="token punctuation">:</span> String<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Post <span class="token directive function">@create</span><span class="token punctuation">(</span><span class="token attr-name">model</span><span class="token punctuation">:</span> <span class="token string">"App\\\\Post"</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h3>@delete</h3>\n<p>The <code class="language-text">@delete</code> directive can be used to delete a model with a given id field. The field must be an <code class="language-text">ID</code> type.</p>\n<div class="gatsby-highlight">\n      <pre class="language-graphql"><code class="language-graphql">type Mutation <span class="token punctuation">{</span>\n  deletePost<span class="token punctuation">(</span><span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Post <span class="token directive function">@delete</span>\n  <span class="token comment"># If you use global ids, you can set the `globalId` argument to true like so:</span>\n  deletePost<span class="token punctuation">(</span><span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Post <span class="token directive function">@delete</span><span class="token punctuation">(</span><span class="token attr-name">globalId</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h3>@event</h3>\n<p>The <code class="language-text">@event</code> directive allows you to fire an event after a mutation has taken place. It requires the <code class="language-text">fire</code> argument that should be the class name of the event you want to fire.</p>\n<div class="gatsby-highlight">\n      <pre class="language-graphql"><code class="language-graphql">type Mutation <span class="token punctuation">{</span>\n  createPost<span class="token punctuation">(</span><span class="token attr-name">title</span><span class="token punctuation">:</span> String<span class="token operator">!</span><span class="token punctuation">,</span> <span class="token attr-name">content</span><span class="token punctuation">:</span> String<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Post\n    <span class="token directive function">@event</span><span class="token punctuation">(</span><span class="token attr-name">fire</span><span class="token punctuation">:</span> <span class="token string">"App\\\\Events\\\\PostCreated"</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h3>@field</h3>\n<p>The <code class="language-text">@field</code> directive points to a class and method used to resolve a field. This can be use to resolve a query or mutation field, or you could also use it to manipulate the output of a field on a registerd type (i.e., format a Carbon instance)</p>\n<div class="gatsby-highlight">\n      <pre class="language-graphql"><code class="language-graphql">type User <span class="token punctuation">{</span>\n  <span class="token attr-name">created_at</span><span class="token punctuation">:</span> String<span class="token operator">!</span>\n    <span class="token directive function">@field</span><span class="token punctuation">(</span><span class="token attr-name">resolver</span><span class="token punctuation">:</span> <span class="token string">"App\\\\Http\\\\GraphQL\\\\Types\\\\UserType@created_at"</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\ntype Mutation <span class="token punctuation">{</span>\n  createPost<span class="token punctuation">(</span><span class="token attr-name">title</span><span class="token punctuation">:</span> String<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Post\n    <span class="token directive function">@field</span><span class="token punctuation">(</span><span class="token attr-name">resolver</span><span class="token punctuation">:</span> <span class="token string">"App\\\\Http\\\\GraphQL\\\\Mutations\\\\PostMutator@create"</span><span class="token punctuation">)</span>\n  updatePost<span class="token punctuation">(</span><span class="token attr-name">title</span><span class="token punctuation">:</span> String<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Post\n    <span class="token directive function">@field</span><span class="token punctuation">(</span><span class="token attr-name">resolver</span><span class="token punctuation">:</span> <span class="token string">"App\\\\Http\\\\GraphQL\\\\Mutations\\\\PostMutator@update"</span><span class="token punctuation">)</span>\n  deletePost<span class="token punctuation">(</span><span class="token attr-name">title</span><span class="token punctuation">:</span> String<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Post\n    <span class="token directive function">@field</span><span class="token punctuation">(</span><span class="token attr-name">resolver</span><span class="token punctuation">:</span> <span class="token string">"App\\\\Http\\\\GraphQL\\\\Mutations\\\\PostMutator@delete"</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h3>@globalId</h3>\n<p>The <code class="language-text">@globalId</code> directive converts a globalId field back to it\'s original id. This can be useful for mutations that accept a global id, but you need the original id to query the database.</p>\n<div class="gatsby-highlight">\n      <pre class="language-graphql"><code class="language-graphql">type Mutation <span class="token punctuation">{</span>\n  <span class="token comment"># In your resolver the $args[\'id\'] will be the original id of the post</span>\n  updatePost<span class="token punctuation">(</span><span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token operator">!</span> <span class="token directive function">@globalId</span><span class="token punctuation">,</span> <span class="token attr-name">title</span><span class="token punctuation">:</span> String<span class="token punctuation">)</span><span class="token punctuation">:</span> Post\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h3>@hasMany</h3>\n<p>The <code class="language-text">@hasMany</code> directive can be used to create a connection between two eloquent models. It also accepts a <code class="language-text">relation</code> argument if the name of the relationship is different than the field. It also accepts a <code class="language-text">type</code> argument that can be set to <code class="language-text">paginator</code> or <code class="language-text">relay</code> to convert the relationship to a pagination field.</p>\n<div class="gatsby-highlight">\n      <pre class="language-graphql"><code class="language-graphql">type User <span class="token punctuation">{</span>\n  <span class="token attr-name">posts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Post<span class="token operator">!</span><span class="token punctuation">]</span><span class="token operator">!</span> <span class="token directive function">@hasMany</span>\n  <span class="token comment"># for a Paginator field</span>\n  <span class="token attr-name">posts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Post<span class="token operator">!</span><span class="token punctuation">]</span><span class="token operator">!</span> <span class="token directive function">@hasMany</span><span class="token punctuation">(</span><span class="token attr-name">type</span><span class="token punctuation">:</span> <span class="token string">"paginator"</span><span class="token punctuation">)</span>\n  <span class="token comment"># for a Relay connection field</span>\n  <span class="token attr-name">posts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Post<span class="token operator">!</span><span class="token punctuation">]</span><span class="token operator">!</span> <span class="token directive function">@hasMany</span><span class="token punctuation">(</span><span class="token attr-name">type</span><span class="token punctuation">:</span> <span class="token string">"relay"</span><span class="token punctuation">)</span>\n  <span class="token comment"># if the relationship on your user model was named `articles`</span>\n  <span class="token attr-name">posts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Post<span class="token operator">!</span><span class="token punctuation">]</span><span class="token operator">!</span> <span class="token directive function">@hasMany</span><span class="token punctuation">(</span><span class="token attr-name">relation</span><span class="token punctuation">:</span> <span class="token string">"articles"</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h3>@inject</h3>\n<p>The <code class="language-text">@inject</code> directive can be used to inject a value from the context object into the arguments. This is really useful with the <code class="language-text">@create</code> directive that rely on the authenticated user\'s <code class="language-text">id</code> that you don\'t want the client to fill in themselves.</p>\n<div class="gatsby-highlight">\n      <pre class="language-graphql"><code class="language-graphql">type Mutation <span class="token punctuation">{</span>\n  createPost<span class="token punctuation">(</span><span class="token attr-name">title</span><span class="token punctuation">:</span> String<span class="token operator">!</span><span class="token punctuation">,</span> <span class="token attr-name">content</span><span class="token punctuation">:</span> String<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Post\n    <span class="token directive function">@create</span><span class="token punctuation">(</span><span class="token attr-name">model</span><span class="token punctuation">:</span> <span class="token string">"App\\\\Post"</span><span class="token punctuation">)</span>\n    <span class="token directive function">@inject</span><span class="token punctuation">(</span><span class="token attr-name">context</span><span class="token punctuation">:</span> <span class="token string">"user.id"</span><span class="token punctuation">,</span> <span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"user_id"</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h3>@paginate</h3>\n<p>The <code class="language-text">@paginate</code> is similar to the <code class="language-text">@hasMany</code> directive in that it return a <code class="language-text">paginator</code> or <code class="language-text">relay</code> connection. However, instead of using it on a <code class="language-text">Type</code> you would instead use it on one of the <code class="language-text">Query</code>\'s fields. This directive requires a <code class="language-text">model</code> argument.</p>\n<div class="gatsby-highlight">\n      <pre class="language-graphql"><code class="language-graphql">type Query <span class="token punctuation">{</span>\n  <span class="token attr-name">posts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Post<span class="token operator">!</span><span class="token punctuation">]</span><span class="token operator">!</span> <span class="token directive function">@paginate</span><span class="token punctuation">(</span><span class="token attr-name">model</span><span class="token punctuation">:</span> <span class="token string">"App\\\\Post"</span><span class="token punctuation">)</span>\n  <span class="token comment"># for a Paginator field</span>\n  <span class="token attr-name">posts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Post<span class="token operator">!</span><span class="token punctuation">]</span><span class="token operator">!</span> <span class="token directive function">@paginate</span><span class="token punctuation">(</span><span class="token attr-name">model</span><span class="token punctuation">:</span> <span class="token string">"App\\\\Post"</span><span class="token punctuation">,</span> <span class="token attr-name">type</span><span class="token punctuation">:</span> <span class="token string">"paginator"</span><span class="token punctuation">)</span>\n  <span class="token comment"># for a Relay connection field</span>\n  <span class="token attr-name">posts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Post<span class="token operator">!</span><span class="token punctuation">]</span><span class="token operator">!</span> <span class="token directive function">@paginate</span><span class="token punctuation">(</span><span class="token attr-name">model</span><span class="token punctuation">:</span> <span class="token string">"App\\\\Post"</span><span class="token punctuation">,</span> <span class="token attr-name">type</span><span class="token punctuation">:</span> <span class="token string">"relay"</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h3>@rename</h3>\n<p>The <code class="language-text">@rename</code> directive can be used to rename on argument on the server side. This comes in handy if you want to use snake_case on the server side but camelCase on the client side. It requires the <code class="language-text">attribute</code> argument</p>\n<div class="gatsby-highlight">\n      <pre class="language-graphql"><code class="language-graphql">type User <span class="token punctuation">{</span>\n  <span class="token attr-name">createdAt</span><span class="token punctuation">:</span> String<span class="token operator">!</span> <span class="token directive function">@rename</span><span class="token punctuation">(</span><span class="token attr-name">attribute</span><span class="token punctuation">:</span> <span class="token string">"created_at"</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2>Node Directives</h2>\n<h3>@group</h3>\n<p>The <code class="language-text">@group</code> directive can be used to set a namespace and/or middleware on a set of fields.</p>\n<div class="gatsby-highlight">\n      <pre class="language-graphql"><code class="language-graphql">type User <span class="token directive function">@group</span><span class="token punctuation">(</span><span class="token attr-name">namespace</span><span class="token punctuation">:</span> <span class="token string">"App\\\\Http\\\\GraphQL\\\\Types"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token attr-name">email</span><span class="token punctuation">:</span> String <span class="token directive function">@field</span><span class="token punctuation">(</span><span class="token attr-name">resolver</span><span class="token punctuation">:</span> <span class="token string">"UserType@email"</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\ntype Mutation <span class="token directive function">@group</span><span class="token punctuation">(</span><span class="token attr-name">middleware</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"api:auth"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  createPost<span class="token punctuation">(</span><span class="token attr-name">title</span><span class="token punctuation">:</span> String<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Post\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>',details:{title:"Directives",date:"March 31, 2018",path:"/docs/2.0/directives"}},pages:{edges:[{post:{id:"/Users/christophermoore/Sites/nuwave/lighthouse-gatsby/src/pages/v2.0/configuration.md absPath of file >>> MarkdownRemark",details:{title:"Configuration",path:"/docs/2.0/config"}}},{post:{id:"/Users/christophermoore/Sites/nuwave/lighthouse-gatsby/src/pages/v2.0/directives.md absPath of file >>> MarkdownRemark",details:{title:"Directives",path:"/docs/2.0/directives"}}},{post:{id:"/Users/christophermoore/Sites/nuwave/lighthouse-gatsby/src/pages/v2.0/installation.md absPath of file >>> MarkdownRemark",details:{title:"Installation",path:"/docs/2.0/installation"}}},{post:{id:"/Users/christophermoore/Sites/nuwave/lighthouse-gatsby/src/pages/v2.0/schema.md absPath of file >>> MarkdownRemark",details:{title:"Schema",path:"/docs/2.0/schema"}}},{post:{id:"/Users/christophermoore/Sites/nuwave/lighthouse-gatsby/src/pages/v2.0/walkthrough.md absPath of file >>> MarkdownRemark",details:{title:"Walkthrough",path:"/docs/2.0/walkthrough"}}}]}},pathContext:{}}}});
//# sourceMappingURL=path---docs-2-0-directives-48d314505c0e115020cf.js.map